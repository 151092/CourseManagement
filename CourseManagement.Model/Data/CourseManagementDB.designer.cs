#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CourseManagement.Model.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CourseManagement")]
	public partial class CourseManagementDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStudentMaster(StudentMaster instance);
    partial void UpdateStudentMaster(StudentMaster instance);
    partial void DeleteStudentMaster(StudentMaster instance);
    partial void InsertCourseMaster(CourseMaster instance);
    partial void UpdateCourseMaster(CourseMaster instance);
    partial void DeleteCourseMaster(CourseMaster instance);
    partial void InsertCourseStudentRef(CourseStudentRef instance);
    partial void UpdateCourseStudentRef(CourseStudentRef instance);
    partial void DeleteCourseStudentRef(CourseStudentRef instance);
    #endregion
		
        //public CourseManagementDBDataContext() : 
        //        base(global::CourseManagement.Model.Properties.Settings.Default.CourseManagementConnectionString, mappingSource)
        //{
        //    OnCreated();
        //}
		
		public CourseManagementDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CourseManagementDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CourseManagementDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CourseManagementDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<StudentMaster> StudentMasters
		{
			get
			{
				return this.GetTable<StudentMaster>();
			}
		}
		
		public System.Data.Linq.Table<CourseMaster> CourseMasters
		{
			get
			{
				return this.GetTable<CourseMaster>();
			}
		}
		
		public System.Data.Linq.Table<CourseStudentRef> CourseStudentRefs
		{
			get
			{
				return this.GetTable<CourseStudentRef>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentMaster")]
	public partial class StudentMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentId;
		
		private string _StudentName;
		
		private string _Phone;
		
		private string _Mobile;
		
		private string _Address;
		
		private bool _IsDeleted;
		
		private EntitySet<CourseStudentRef> _CourseStudentRefs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnStudentNameChanging(string value);
    partial void OnStudentNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public StudentMaster()
		{
			this._CourseStudentRefs = new EntitySet<CourseStudentRef>(new Action<CourseStudentRef>(this.attach_CourseStudentRefs), new Action<CourseStudentRef>(this.detach_CourseStudentRefs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string StudentName
		{
			get
			{
				return this._StudentName;
			}
			set
			{
				if ((this._StudentName != value))
				{
					this.OnStudentNameChanging(value);
					this.SendPropertyChanging();
					this._StudentName = value;
					this.SendPropertyChanged("StudentName");
					this.OnStudentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(11)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(11)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentMaster_CourseStudentRef", Storage="_CourseStudentRefs", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<CourseStudentRef> CourseStudentRefs
		{
			get
			{
				return this._CourseStudentRefs;
			}
			set
			{
				this._CourseStudentRefs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseStudentRefs(CourseStudentRef entity)
		{
			this.SendPropertyChanging();
			entity.StudentMaster = this;
		}
		
		private void detach_CourseStudentRefs(CourseStudentRef entity)
		{
			this.SendPropertyChanging();
			entity.StudentMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseMaster")]
	public partial class CourseMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseId;
		
		private string _CourseName;
		
		private decimal _CourseDuration;
		
		private int _CourseFees;
		
		private bool _IsDeleted;
		
		private EntitySet<CourseStudentRef> _CourseStudentRefs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    partial void OnCourseDurationChanging(decimal value);
    partial void OnCourseDurationChanged();
    partial void OnCourseFeesChanging(int value);
    partial void OnCourseFeesChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public CourseMaster()
		{
			this._CourseStudentRefs = new EntitySet<CourseStudentRef>(new Action<CourseStudentRef>(this.attach_CourseStudentRefs), new Action<CourseStudentRef>(this.detach_CourseStudentRefs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseDuration", DbType="Decimal(18,2) NOT NULL")]
		public decimal CourseDuration
		{
			get
			{
				return this._CourseDuration;
			}
			set
			{
				if ((this._CourseDuration != value))
				{
					this.OnCourseDurationChanging(value);
					this.SendPropertyChanging();
					this._CourseDuration = value;
					this.SendPropertyChanged("CourseDuration");
					this.OnCourseDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseFees", DbType="Int NOT NULL")]
		public int CourseFees
		{
			get
			{
				return this._CourseFees;
			}
			set
			{
				if ((this._CourseFees != value))
				{
					this.OnCourseFeesChanging(value);
					this.SendPropertyChanging();
					this._CourseFees = value;
					this.SendPropertyChanged("CourseFees");
					this.OnCourseFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseMaster_CourseStudentRef", Storage="_CourseStudentRefs", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<CourseStudentRef> CourseStudentRefs
		{
			get
			{
				return this._CourseStudentRefs;
			}
			set
			{
				this._CourseStudentRefs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseStudentRefs(CourseStudentRef entity)
		{
			this.SendPropertyChanging();
			entity.CourseMaster = this;
		}
		
		private void detach_CourseStudentRefs(CourseStudentRef entity)
		{
			this.SendPropertyChanging();
			entity.CourseMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseStudentRef")]
	public partial class CourseStudentRef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseStudentRefId;
		
		private int _CourseId;
		
		private int _StudentId;
		
		private bool _IsDeleted;
		
		private EntityRef<CourseMaster> _CourseMaster;
		
		private EntityRef<StudentMaster> _StudentMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseStudentRefIdChanging(int value);
    partial void OnCourseStudentRefIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public CourseStudentRef()
		{
			this._CourseMaster = default(EntityRef<CourseMaster>);
			this._StudentMaster = default(EntityRef<StudentMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseStudentRefId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseStudentRefId
		{
			get
			{
				return this._CourseStudentRefId;
			}
			set
			{
				if ((this._CourseStudentRefId != value))
				{
					this.OnCourseStudentRefIdChanging(value);
					this.SendPropertyChanging();
					this._CourseStudentRefId = value;
					this.SendPropertyChanged("CourseStudentRefId");
					this.OnCourseStudentRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._CourseMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int NOT NULL")]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._StudentMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseMaster_CourseStudentRef", Storage="_CourseMaster", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CourseMaster CourseMaster
		{
			get
			{
				return this._CourseMaster.Entity;
			}
			set
			{
				CourseMaster previousValue = this._CourseMaster.Entity;
				if (((previousValue != value) 
							|| (this._CourseMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseMaster.Entity = null;
						previousValue.CourseStudentRefs.Remove(this);
					}
					this._CourseMaster.Entity = value;
					if ((value != null))
					{
						value.CourseStudentRefs.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("CourseMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentMaster_CourseStudentRef", Storage="_StudentMaster", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudentMaster StudentMaster
		{
			get
			{
				return this._StudentMaster.Entity;
			}
			set
			{
				StudentMaster previousValue = this._StudentMaster.Entity;
				if (((previousValue != value) 
							|| (this._StudentMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentMaster.Entity = null;
						previousValue.CourseStudentRefs.Remove(this);
					}
					this._StudentMaster.Entity = value;
					if ((value != null))
					{
						value.CourseStudentRefs.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(int);
					}
					this.SendPropertyChanged("StudentMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
